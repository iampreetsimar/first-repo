Hi! This is my first repo.
Data - 30 Jan, 2024

Repo : first-repo

GIT COMMANDS:

-> git init - to initialize git in local repo
-> git add <filename1> <filename2> ... - to add files to staging area
-> git add . - adds all files in repo to staging area
-> git status - shows current status of files in the repo
-> git commit -m "<Commit Message>" - to commit changes to local repo
-> git push - to push local repo changes to remote(Github) repo
-> git log - shows log of commits done from most to least recent in order
-> git log --all --decorate --oneline --graph : shows all commits for all branches in a graphical way if needed

// CLONING REPO
-> git clone <https or ssh repo url> - to clone remote repo to local


// .gitignore file - ignores files/folders to not be tracked by git
// RULES
-> # - adds comment in .gitignore file
-> *.a - ignore all files with .a extension
-> *.[oa] - ignore all files woth .a and .o extension

// ignore all files with .a extension except file <lib.a>
-> *.a
-> !lib.a

-> todo - ignore all files with name "todo" in current directory as well as any subdirectories
-> /todo - ignore all files with name "todo" in current directory ONLY!!
-> test/ - ignore directory named "test"
-> [0-9] - ignore all files containing digit [0 -9] in its name

// ? - matches a single character
-> l?b.a - ignore all files with name l?b.a; ? can have any character in its place


// DELETE FILE(git rm : combination of terminal rm command + git add command)
-> git rm <filename> - removed file from repo and add removal change to staging area
-> git rm -f <filename> - Consider we have a file modified currently and we want to delete it using git rm.
                          This will cause an error because file has some changes in it. Still, if we want to
                          continue with deletion, use -f(force flag).

// UNSTAGE FILE
-> git rm --cached <filename> - Consider we have a file in staging area with some changes. If we want to unstage 
                                that file so that it goes back being untracked, use --cached flag.

// UNDO COMMIT(Most recent in local repo)
-> git commit --amend - Consider we have committed to our local repo but there are some minor changes which we
                        want to add(add a new file, add some code) or we want to edit previous commit message,
                        use --amend flag with commit. This replaces the most recent commit with a new one.
                        Works only in local repo. If commit already pushed to remote(Github), won't work.


// GIT RESET HEAD
-> git reset HEAD <filename> - Consider a file having some changes(in modified state) and added to staging area.
                               If we want to remove it from staging area but should still have the changes(it goes 
                               back to modifed state), use this command. If the file is new and hasn't been tracked 
                               yet, this command will move it back to untracked state. Flags available in this 
                               command: --soft, --mixed, --hard.


// GIT CHECKOUT
-> git checkout -- <filename> - reverts file back to its most recet commit and deleted all changes if any present
                                permanently.


// GIT STASH (works on multiple files simulatenously.)
-> git stash - revers files back to its most recent commit and deletes all changes present if any and stores them in a
               stash(STACK behind the scenes). If multiple files are opened and have changes, changes from those files
                will be stashed.
             
-> git stash pop - adds changes back to the files which are stored in stash. Changes are popped in LIFO manner.
                   If changes were stashed from multiple files, changes will be added back to all those files.
                   
-> git stash clear - clears stash of any changes which were stored and deletes them permanently.


// GIT RESTORE
-> git restore <filename> - restores file to last staging version first. If no staging version present,
                            restores to last commit version.
                            If no staging version present, moves file back from modified to unmodified stage and
                            works similar to git checkout.

-> git restore --staged <filename> - restores staged file to unstage version. Works similar to git reset.
                                     Move file from staging area to modified stage.

// ALIASING (not a command but a feature)
-> git config --global alias.<customized command name> <git command> - gives an personlized alias name to git 
                                                                       command globally(for all projects).
Eg. git config --global alias.unstage 'reset HEAD' - sets 'unstage' as an alias for git reset HEAD commnd.


// GIT REBASE
-> git rebase <base-branch> - makes copies of commits of current branch with new hashes and attaches these 
                              these copies commits to latest commit of the base-branch.
                            - Helps in rewriting commit history and making it linear.
                            - Very dangerous command if more than one individual is making changes on an active
                              branch. So, only use this if tha branch to be rebased is not active.
                            - Personal Rule: Use rebase if the code has not been pushed to remote even once. If
                                             it has, don't use rebase and avoid conflicts!!

-> git rebase -i <base-branch> - interactive flag allows to choose which commits to pick or drop for rebasing.


// FORK
-> Forking a project is useful for Open Source Contributions. Following steps to be followed:
1. Fork a project from Github  
      - creates a copy of the project repo in own account
2. Clone forked repo from own account
      - creates a local repo for forked project
      - origin(remote) of main local branch is OG repo's main branch from remote
      - Any pull in local main will fetch changes from OG repo's main
      - Can't push changes directly from local main to OG repo's main as we don't have write access

3. Create a feature branch in local
      - Add any changes to the feature branch
      - Set pull origin of local feature branch to be local main branch so that this feature branch
        fetches any changes being added in local main branch which in turn fetches changes from
        OG repo's main branch
      - Set push origin of local feature branch to a branch with same name in own forked repo
      - Any changes is local feature will be pushed to a branch with same name in forked repo in 
        own account

4. Create a PULL REQUEST
      - pull request to add changes from forked repo's feature branch to OG repo's main branch
      - OG repo's maintainer will either allow the merge/ request some changes for merge or deny
        the merge

-> git remote -v - shows all remotes for fetch and push for current branch
-> git remote add <custom-origin-name> <custom-origin-url> - sets a custom remote for current branch
                                                             to fetch and push at the custom url

