Hi! This is my first repo.
Data - 30 Jan, 2024

Repo : first-repo

GIT COMMANDS:

-> git init - to initialize git in local repo
-> git add <filename1> <filename2> ... - to add files to staging area
-> git add . - adds all files in repo to staging area
-> git status - shows current status of files in the repo
-> git commit -m "<Commit Message>" - to commit changes to local repo
-> git push - to push local repo changes to remote(Github) repo
-> git log - shows log of commits done from most to least recent in order

// CLONING REPO
-> git clone <https or ssh repo url> - to clone remote repo to local


// .gitignore file - ignores files/folders to not be tracked by git
// RULES
-> # - adds comment in .gitignore file
-> *.a - ignore all files with .a extension
-> *.[oa] - ignore all files woth .a and .o extension

// ignore all files with .a extension except file <lib.a>
-> *.a
-> !lib.a

-> todo - ignore all files with name "todo" in current directory as well as any subdirectories
-> /todo - ignore all files with name "todo" in current directory ONLY!!
-> test/ - ignore directory named "test"
-> [0-9] - ignore all files containing digit [0 -9] in its name

// ? - matches a single character
-> l?b.a - ignore all files with name l?b.a; ? can have any character in its place


// DELETE FILE(git rm : combination of terminal rm command + git add command)
-> git rm <filename> - removed file from repo and add removal change to staging area
-> git rm -f <filename> - Consider we have a file modified currently and we want to delete it using git rm.
                          This will cause an error because file has some changes in it. Still, if we want to
                          continue with deletion, use -f(force flag).

// UNSTAGE FILE
-> git rm --cached <filename> - Consider we have a file in staging area with some changes. If we want to unstage 
                                that file so that it goes back being untracked, use --cached flag.

// UNDO COMMIT(Most recent in local repo)
-> git commit --amend - Consider we have committed to our local repo but there are some minor changes which we
                        want to add(add a new file, add some code) or we want to edit previous commit message,
                        use --amend flag with commit. This replaces the most recent commit with a new one.
                        Works only in local repo. If commit already pushed to remote(Github), won't work.